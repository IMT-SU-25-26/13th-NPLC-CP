// PRISMA SCHEMA FILE
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODEL
enum Role {
  USER
  ADMIN
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  image              String?
  password           String?
  activeSessionToken String?
  emailVerified      DateTime?
  lastSubmission     DateTime?
  score              Int       @default(0)
  role               Role      @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  discussions Discussion[]
  replies     Reply[]
}

// COMPETITIVE PROGRAMMING MODELS
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  PENDING
  PROCESSING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  COMPILATION_ERROR
  RUNTIME_ERROR_SIGSEGV
  RUNTIME_ERROR_SIGXFSZ
  RUNTIME_ERROR_SIGFPE
  RUNTIME_ERROR_SIGABRT
  RUNTIME_ERROR_NZEC
  RUNTIME_ERROR_OTHER
  INTERNAL_ERROR
  EXEC_FORMAT_ERROR
}

model Problem {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String
  description String     @db.Text
  timeLimit   Float
  memoryLimit Int
  points      Int
  difficulty  Difficulty

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testCases   TestCase[]
  submissions Submission[]
}

model TestCase {
  id             String  @id @default(cuid())
  input          String  @db.Text
  expectedOutput String  @db.Text
  isSample       Boolean @default(false)

  problemId String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Submission {
  id          String  @id @default(cuid())
  userId      String
  problemId   String
  languageId  Int
  sourceCode  String  @db.Text
  judge0Token String?
  time        Float?
  memory      Int?
  status      Status  @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id])
}

model Language {
  id   Int    @id
  name String @unique

  submissions Submission[]
}

// CONTEST MODELS
enum ContestStatus {
  PENDING
  RUNNING
  FROZEN
  PAUSED
  FINISHED
}

model Contest {
  id                  String         @id @default(cuid())
  name                String
  startTime           DateTime
  endTime             DateTime
  pausedTime          DateTime?
  totalPausedDuration Int            @default(0)
  frozenLeaderboard   Json?
  statusBeforePause   ContestStatus?
  status              ContestStatus  @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discussion {
  id       String @id @default(cuid())
  title    String @db.Text
  question String @db.Text
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies Reply[]
}

model Reply {
  id           String @id @default(cuid())
  content      String @db.Text
  authorId     String
  discussionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
}
